
local tilePropery={
	snakehead = 3,
	food = 4,
	snakeone = 1,
	snaketwo = 2,
	lightground = 5,
	bordertop = 6,
	borderright = 7,
	snakethree = 8,
	snakefour = 9,
	snakefive = 10,
	snakesix = 11,
	darkground = 12,
	borderleft = 13,
	borderbottom = 14
}

local function getn (t)
  if type(t.n) == "number" then return t.n end
  local max = 0
  for i, _ in t do
    if type(i) == "number" and i>max then max=i end
  end
  return max
end

local function round(num, numDecimalPlaces)
  if numDecimalPlaces and numDecimalPlaces>0 then
    local mult = 10^numDecimalPlaces
    return math.floor(num * mult + 0.5) / mult
  end
  return math.floor(num + 0.5)
end

local function isLegalSpot(self)
	local returnMe = true
	for i, s in ipairs(self.segments) do
		if self.food.x == s.x and self.food.y == s.y then
			returnMe = false
			--print('About to insert fruit inside a segment lol whoops!')
			--pprint(self.food)	
		end
	end
	return returnMe
end

local function findLegalFoodSpot(self)
	
	for i, s in ipairs(self.segments) do
		if self.food.x == s.x and self.food.y == s.y then
			print('About to insert fruit inside a segment lol whoops!')
			pprint(self.food)	
		end
	end
	
end


local function put_food(self)
	--[[
	x	number x coordinate of the bottom left corner
	y	number y coordinate of the bottom left corner
	w	number number of columns (width) in the tile map
	h	number number of rows (height) in the tile map
	]]
	local x1, y1, w1, h1 = tilemap.get_bounds("#grid")
	
	--pprint('x' .. x1 .. '  y' .. y1 .. '  w'.. w1 ..'  h'.. h1)
    self.food = {x = math.random(2, w1-2), y = math.random(2, h1-2)}
    --pprint(tilemap.get_bounds("#grid"))
	--self.food = {x = 27, y = 28} --Top Right
	--self.food = {x = -28, y = 28} --Top Left
	--self.food = {x = 27, y = -9} --Bottom Right
	--self.food = {x = -28, y = -9} --Bottom Left 
	
	local halfwidth = w1/2
	local halfheight = h1/2
	
	--will we spawn food inside the snake? That's not OK...
	
--[[for i, s in ipairs(self.segments) do
		if self.food.x == s.x and self.food.y == s.y then
			print('About to insert fruit inside a segment lol whoops!')
			pprint(self.food)	
		end
	end	
	]]
	local trycounter = 1
	while isLegalSpot(self) == false do
		
		print('Finding a legal spot attempt' .. trycounter)
		
		trycounter = trycounter + 1
		
		if self.food.x <= (w1-2) and self.food.x > ((w1-2)/2) then
			self.food.x = self.food.x + 1
		elseif self.food.x > (3) then
			self.food.x = self.food.x - 1
		end
		
		if self.food.y <= (h1-2) and self.food.y > ((h1-2)/2) then
			self.food.y = self.food.y + 1
		elseif self.food.x > (3) then
			self.food.y = self.food.y - 1
		end	
			
	end
		
	
		
	
	
	--print('food put at X:' .. self.food.x .. '  Y:' .. self.food.y)
	--pprint(self.segments)
	tilemap.set_tile("#grid", "layer1", self.food.x, self.food.y, tilePropery.food)        
end

local function restartGame(self)
    self.segments = {
        {x = 7, y = 10},
        {x = 8, y = 10},
        {x = 9, y = 10},
        {x = 10, y = 10} }
    self.dir = {x = 1, y = 0}
    self.dirqueue = {}
    self.speed = 7.0
    self.alive = true
    self.t = 0
    self.score = 0
    self.gameTimer = 0
    msg.post("#gameGui", "set_speed", { speed = self.speed })    
    put_food(self)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	math.randomseed(os.clock())
	restartGame(self)
end

function update(self, dt)
	
	if self.alive then
		self.gameTimer = self.gameTimer + 1
	else
		self.gameTimer = 0
	end
	
    self.t = self.t + dt
    
    msg.post("#gameGui", "set_timer", { timer = round((self.gameTimer/60),1) })
    
    if self.t >= 1.0 / self.speed and self.alive then --we are alive
    	
        local newdir = table.remove(self.dirqueue, 1)
        
        if newdir then
            local opposite = newdir.x == -self.dir.x or newdir.y == -self.dir.y
            if not opposite then
                self.dir = newdir
            end
        end

        local head = self.segments[#self.segments]
        local newhead = {x = head.x + self.dir.x, y = head.y + self.dir.y}

        table.insert(self.segments, newhead)

        local tile = tilemap.get_tile("#grid", "layer1", newhead.x, newhead.y)
		
		
		
        --if tile == 2 or tile == 4 then
        if tile == tilePropery.bordertop 
			or tile == tilePropery.borderright 
			or tile == tilePropery.borderleft 
			or tile == tilePropery.borderbottom 
			or tile == tilePropery.snakeone 
			or tile == tilePropery.snaketwo 
			or tile == tilePropery.snakethree 
			or tile == tilePropery.snakefour 
			or tile == tilePropery.snakefive 
			or tile == tilePropery.snakesix
            then
            self.alive = false
        --elseif tile == 3 then --Food was eaten!
        elseif tile == tilePropery.food then
            self.score = self.score + self.speed
			self.speed = self.speed + 1
			msg.post("#gameGui", "set_speed", { speed = self.speed })
            msg.post("#gameGui", "set_score", { score = self.score })
            put_food(self)
        else
            local tail = table.remove(self.segments, 1)
            local tileLower = tilemap.get_tile("#grid", "layer", tail.x, tail.y)
            if tileLower == tilePropery.darkground then
            	tilemap.set_tile("#grid", "layer1", tail.x, tail.y, tilePropery.darkground )
            else
            	tilemap.set_tile("#grid", "layer1", tail.x, tail.y, tilePropery.lightground )
        	end
		end

		local segmentcounter = 0
		for i, s in ipairs(self.segments) do
			segmentcounter = segmentcounter + 1
		end

        for i, s in ipairs(self.segments) do
        	if i == segmentcounter then 
        		tilemap.set_tile("#grid", "layer1", s.x, s.y, tilePropery.snakehead)
			else 
            	tilemap.set_tile("#grid", "layer1", s.x, s.y, tilePropery.snakeone)     
			end
        end
        self.t = 0
                
    elseif self.alive == false then  --we are dead
    	msg.post(".", "release_input_focus") --give control to GUI
    	msg.post("main:/controller/controller#script", "show_menu")
    end
    
end

function on_input(self, action_id, action)
    if action_id == hash("up") and action.pressed then
        table.insert(self.dirqueue, {x = 0, y = 1})
    elseif action_id == hash("down") and action.pressed then
        table.insert(self.dirqueue, {x = 0, y = -1})
    elseif action_id == hash("left") and action.pressed then
        table.insert(self.dirqueue, {x = -1, y = 0})
    elseif action_id == hash("right") and action.pressed then
        table.insert(self.dirqueue, {x = 1, y = 0})
    end 
end

function on_message(self, message_id, message, sender)
	if message_id == hash("restart_game") then
		msg.post(".", "acquire_input_focus")
	end
end