local function put_food(self)
	
	
	--[[
	x	number x coordinate of the bottom left corner
	y	number y coordinate of the bottom left corner
	w	number number of columns (width) in the tile map
	h	number number of rows (height) in the tile map
	]]
	--local x, y, w, h = tilemap.get_bounds("#grid")
    self.food = {x = math.random(-28, 27), y = math.random(-9, 28)}
    
	--self.food = {x = 27, y = 28} --Top Right
	--self.food = {x = -28, y = 28} --Top Left
	
	--self.food = {x = 27, y = -9} --Bottom Right
	--self.food = {x = -28, y = -9} --Bottom Left
   -- local myTileMap = 
    tilemap.set_tile("#grid", "layer1", self.food.x, self.food.y, 3)        
end

function init(self)
    msg.post(".", "acquire_input_focus")

    self.segments = {
        {x = 7, y = 24},
        {x = 8, y = 24},
        {x = 9, y = 24},
        {x = 10, y = 24} }
    self.dir = {x = 1, y = 0}
    self.dirqueue = {}
    self.speed = 7.0
    self.alive = true
    self.t = 0
    self.score = 0
    
    msg.post("#gameGui", "set_speed", { speed = self.speed })
    
    math.randomseed(os.clock())
    put_food(self)
end

function update(self, dt)
	
	
	
    self.t = self.t + dt
    if self.t >= 1.0 / self.speed and self.alive then
        local newdir = table.remove(self.dirqueue, 1)
        
        if newdir then
            local opposite = newdir.x == -self.dir.x or newdir.y == -self.dir.y
            if not opposite then
                self.dir = newdir
            end
        end

        local head = self.segments[#self.segments]
        local newhead = {x = head.x + self.dir.x, y = head.y + self.dir.y}

        table.insert(self.segments, newhead)

        local tile = tilemap.get_tile("#grid", "layer1", newhead.x, newhead.y)

        if tile == 2 or tile == 4 then
            self.alive = false
        elseif tile == 3 then --Food was eaten!
            self.score = self.score + self.speed
			self.speed = self.speed + 1
			msg.post("#gameGui", "set_speed", { speed = self.speed })
            msg.post("#gameGui", "set_score", { score = self.score })
            put_food(self)
        else
            local tail = table.remove(self.segments, 1)
            tilemap.set_tile("#grid", "layer1", tail.x, tail.y, 1)
        end

        for i, s in ipairs(self.segments) do
            tilemap.set_tile("#grid", "layer1", s.x, s.y, 2)            
        end
        
        self.t = 0
    end
    
    
 
    
end

function on_input(self, action_id, action)
    if action_id == hash("up") and action.pressed then
        table.insert(self.dirqueue, {x = 0, y = 1})
    elseif action_id == hash("down") and action.pressed then
        table.insert(self.dirqueue, {x = 0, y = -1})
    elseif action_id == hash("left") and action.pressed then
        table.insert(self.dirqueue, {x = -1, y = 0})
    elseif action_id == hash("right") and action.pressed then
        table.insert(self.dirqueue, {x = 1, y = 0})
    end 
end